<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.qwk.blindBox.mapper.UserPrizeMapper">

    <resultMap type="UserPrize" id="UserPrizeResult">
        <result property="id"    column="id"    />
        <result property="userId"    column="user_id"    />
        <result property="goodsId"    column="goods_id"    />
        <result property="type"    column="type"    />
        <result property="state"    column="state"    />
        <result property="num"    column="num"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="remark"    column="remark"    />
        <result property="isNovice"    column="is_novice"    />
        <association property="goods"    column="id" javaType="Goods" resultMap="GoodsResult" />
    </resultMap>

    <resultMap type="Goods" id="GoodsResult">
        <result property="id"    column="g_id"    />
        <result property="type"    column="g_type"    />
        <result property="categoryId"    column="g_category_id"    />
        <result property="name"    column="g_name"    />
        <result property="image"    column="g_image"    />
        <result property="number"    column="g_number"    />
        <result property="supplier"    column="g_supplier"    />
        <result property="costPrice"    column="g_cost_price"    />
        <result property="platformPrice"    column="g_platform_price"    />
        <result property="cashPrice"    column="g_cash_price"    />
        <result property="postage"    column="g_postage"    />
        <result property="soldQuantity"    column="g_sold_quantity"    />
        <result property="inventory"    column="g_inventory"    />
        <result property="listingTime"    column="g_listing_time"    />
        <result property="offShelfTime"    column="g_off_shelf_time"    />
        <result property="status"    column="g_status"    />
        <result property="sort"    column="g_sort"    />
        <result property="pSId"    column="g_p_s_id"    />
        <result property="describe"    column="g_describe"    />
        <result property="createdTime"    column="g_CREATED_TIME"    />
        <result property="updatedBy"    column="g_UPDATED_BY"    />
        <result property="updatedTime"    column="g_UPDATED_TIME"    />
    </resultMap>

    <sql id="selectUserPrizeVo">
        select u.id, u.user_id, u.goods_id, u.type, u.state, u.num, u.create_by, u.create_time, u.update_by, u.update_time, u.remark,u.is_novice,
            g.`id` as g_id, g.`type` as g_type,g.`category_id` as g_category_id, g.`name` as g_name, g.image as g_image,g.`number` as g_number, g.`supplier` as g_supplier, g.`cost_price` as g_cost_price, g.`platform_price` as g_platform_price, g.`cash_price` as g_cash_price,g.`postage` as g_postage, g.`sold_quantity` as g_sold_quantity, g.`inventory` as g_inventory, g.`listing_time` as g_listing_time, g.`off_shelf_time` as g_off_shelf_time, g.`status` as g_status, g.`sort` as g_sort, g.`p_s_id` as g_p_s_id, g.`describe` as g_describe, g.`CREATED_TIME` as g_CREATED_TIME,g.`UPDATED_BY` as g_UPDATED_BY,g.`UPDATED_TIME` as g_UPDATED_TIME
        from user_prize u
        LEFT JOIN goods g ON u.goods_id = g.id
    </sql>

    <select id="selectUserPrizeList" parameterType="UserPrize" resultMap="UserPrizeResult">
        <include refid="selectUserPrizeVo"/>
        <where>
            <if test="id != null "> and u.id = #{id}</if>
            <if test="userId != null "> and u.user_id = #{userId}</if>
            <if test="goodsId != null "> and u.goods_id = #{goodsId}</if>
            <if test="type != null  and type != ''"> and u.type = #{type}</if>
            <if test="state != null  and state != ''"> and u.state = #{state}</if>
            <if test="num != null "> and u.num = #{num}</if>
            <if test="createBy != null  and createBy != ''"> and u.create_by like concat('%', #{createBy}, '%')</if>
            <if test="params.beginCreateTime != null and params.beginCreateTime != '' and params.endCreateTime != null and params.endCreateTime != ''"> and u.create_time between #{params.beginCreateTime} and #{params.endCreateTime}</if>
            <if test="updateBy != null  and updateBy != ''"> and u.update_by like concat('%', #{updateBy}, '%')</if>
            <if test="params.beginUpdateTime != null and params.beginUpdateTime != '' and params.endUpdateTime != null and params.endUpdateTime != ''"> and u.update_time between #{params.beginUpdateTime} and #{params.endUpdateTime}</if>
            <if test="isNovice != null  and isNovice != ''"> and u.is_novice = #{isNovice}</if>
            <if test="params.inState != null  and params.inState != ''"> and u.state in ('0','2')</if>
            <if test="params.isDebris != null  and params.isDebris != ''"> and g.is_debris = #{params.isDebris}</if>
        </where>
    </select>

    <select id="selectUserPrizeById" parameterType="Long" resultMap="UserPrizeResult">
        <include refid="selectUserPrizeVo"/>
        where u.id = #{id}
    </select>

    <insert id="insertUserPrize" parameterType="UserPrize" useGeneratedKeys="true" keyProperty="id">
        insert into user_prize
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="goodsId != null">goods_id,</if>
            <if test="type != null and type != ''">`type`,</if>
            <if test="state != null">state,</if>
            <if test="num != null">num,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="remark != null">remark,</if>
            <if test="isNovice != null">is_novice,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="goodsId != null">#{goodsId},</if>
            <if test="type != null and type != ''">#{type},</if>
            <if test="state != null">#{state},</if>
            <if test="num != null">#{num},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="remark != null">#{remark},</if>
            <if test="isNovice != null">#{isNovice},</if>
         </trim>
    </insert>

    <update id="updateUserPrize" parameterType="UserPrize">
        update user_prize
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="goodsId != null">goods_id = #{goodsId},</if>
            <if test="type != null and type != ''">`type` = #{type},</if>
            <if test="state != null">state = #{state},</if>
            <if test="num != null">num = #{num},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="isNovice != null">is_novice = #{isNovice},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteUserPrizeById" parameterType="Long">
        delete from user_prize where id = #{id}
    </delete>

    <delete id="deleteUserPrizeByIds" parameterType="String">
        delete from user_prize where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="selectUserPrizeByUserId" parameterType="long" resultMap="UserPrizeResult">
        <include refid="selectUserPrizeVo"/>
        where u.id = #{id} and u.user_id = #{userId}
    </select>

    <select id="isNovice" parameterType="long" resultType="integer">
        select count(id) from user_prize  where user_id = #{userId} AND goods_id IN(35, 44, 45, 46, 47, 48, 49, 50, 52,96,97,98)
    </select>

    <select id="getByUserIdAndGoodsId" parameterType="long" resultMap="UserPrizeResult">
        SELECT * FROM user_prize
        WHERE user_id = #{userId} AND goods_id = #{goodsId}
    </select>

    <select id="getLuckyList" parameterType="UserPrize" resultType="hashmap">
        SELECT up.id,up.goods_id AS goodsId,g.`name` AS goodsName,g.cash_price AS cashPrice,g.image AS image,u.user_name AS userName ,u.user_id AS userId,u.avatar AS avatar,u.nick_name AS nickName
        FROM user_prize up
        LEFT JOIN `ry-vue`.sys_user u ON up.user_id = u.user_id
        LEFT JOIN goods g ON up.goods_id = g.id
        <where>
            <if test="userId != null "> and up.user_id = #{userId}</if>
          and  g.is_debris != '0'
        </where>
        ORDER BY CAST(g.cash_price AS DOUBLE) DESC LIMIT 10
    </select>




</mapper>
